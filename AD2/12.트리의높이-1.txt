#include <iostream>
#include <vector>
#include <queue>
using namespace std;
const int MAX = 101;
vector<int> a[MAX];
int d[MAX];
bool c[MAX];
int ans = 0;
int bfs(int start){
  queue<int> q;
  q.push(start);
  c[start] = true;
  d[start] = 0;
  while(!q.empty()){
    int now = q.front(); q.pop();
    for(int i=0; i<a[now].size(); i++){
      int next = a[now][i];
      if(!c[next]){
        c[next]=true;
        d[next] = d[now]+1;
        q.push(next);
        if(d[next] > ans )
          ans = d[next];
      }
    }
  }
  return ans;
}int main() {
  //Please Enter Your Code Here
  int n, r; 
  cin >> n >> r;
  for(int i=0; i<n-1; i++){ // 노드의개수와 간선의 개수.
    int x, y; cin >> x >> y;
    a[x].push_back(y);
    a[y].push_back(x);
  }
  
  cout << bfs(r) << '\n';
  
  return 0;
#include <iostream>
using namespace std;
bool a[101][101];
int n, r;
int ans = 0;  
void getHeight(int depth, int now, int prev){
  for(int i=0; i<n; i++){
    // 각 노드 번호를 일일이 탐색한다.
    if(i==prev) continue;
    if(a[now][i]){
      // 현재 노드와 다음노드가 연결되어있다면,
      // 높이를 하나 증가한다.
      getHeight(depth+1, i, now);
    }
  }
  if(ans<depth) ans = depth;
}int main() {
  //Please Enter Your Code Here
  cin >> n >> r;
  for(int i=0; i<n-1; i++){ // 노드의개수와 간선의 개수.
    int x, y; cin >> x >> y;
    a[x][y] = true;
    a[y][x] = true;
  }
  
  getHeight(0, r, -1);
  
  cout << ans << '\n';
  
  return 0;
}
