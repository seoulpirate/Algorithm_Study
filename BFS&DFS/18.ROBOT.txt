#include <iostream>
#include <queue>
#include <cstring>
#include <vector>
#include <tuple>
using namespace std;
int d[100][100][4];
int a[100][100];
int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

int convert(int x){
  if(x==0) return 1;
  else if(x==1) return 3;
  else if(x==2) return 2;
  else if(x==3) return 0;
}

int main() {

  //Please Enter Your Code Here
  memset(d, -1, sizeof(d));
  int n, m; cin >> n >> m;
  for(int i=1; i<=n; i++)
    for(int j=1; j<=m; j++)
      cin >> a[i][j];
  int sx, sy, sk; cin >> sx >> sy >> sk;
  int ex, ey, ek; cin >> ex >> ey >> ek;
  sk-=1; ek-=1;
  sk = convert(sk);
  ek = convert(ek);
  
  queue<tuple<int, int, int>> q;
  q.push(make_tuple(sx, sy, sk));
  d[sx][sy][sk]=0;
  while(!q.empty()){
    int x, y, k;
    tie(x,y,k)=q.front(); q.pop();
    int nk = (k+1)%4;
    if(d[x][y][nk]==-1){
      d[x][y][nk] = d[x][y][k]+1;
      q.push(make_tuple(x,y,nk));
    }
    nk = (k+3)%4;
    if(d[x][y][nk]==-1){
      d[x][y][nk]=d[x][y][k]+1;
      q.push(make_tuple(x,y,nk));
    }
    
    for(int l=1; l<=3; l++){
      int nx = x+dx[k]*l;
      int ny = y+dy[k]*l;
      if(nx>=1 && nx<=n && ny>=1 && ny<=m){
        if(a[nx][ny]==1) break;
        if(d[nx][ny][k]==-1){
          d[nx][ny][k]=d[x][y][k]+1;
          q.push(make_tuple(nx,ny,k));
        }
      }
    }
  }
  cout << d[ex][ey][ek] << '\n';
  return 0;
}
