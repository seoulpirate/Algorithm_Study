#include <iostream>
#include <queue>
#include <tuple>
#include <algorithm>
using namespace std;
int d[1001][1001][2];
int a[1001][1001];
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};

int main() {

  //Please Enter Your Code Here
  int n, m; cin >> n >> m;
  for(int i=0; i<n; i++)
    for(int j=0; j<m; j++)
      cin >> a[i][j];
  
  queue<tuple<int,int, int>> q;
  q.push(make_tuple(n-1, 0, 0));
  d[n-1][0][0] = 0;
  while(!q.empty()){
    int x, y, t;
    tie(x, y, t) = q.front(); q.pop();
    for(int k=0; k<4; k++){
      int nx = x+dx[k];
      int ny = y+dy[k];
      if(nx>=0 && nx<n && ny>=0 && ny<m){
        if(t==0 && a[nx][ny]==1 && d[nx][ny][t+1]==0){
          d[nx][ny][t+1] = d[x][y][t]+1;
          q.push(make_tuple(nx, ny, t+1));
        }else if(a[nx][ny]==0 && d[nx][ny][t]==0){
          d[nx][ny][t] = d[x][y][t]+1;
          q.push(make_tuple(nx, ny, t));
        }
      }
    }
  }
  
  if(d[0][m-1][0]!=0 && d[0][m-1][1]!=0){
    cout << min(d[0][m-1][0], d[0][m-1][1]) << '\n';
  }else if(d[0][m-1][0]!=0){
    cout << d[0][m-1][0] << '\n';
  }else if(d[0][m-1][1]!=0){
    cout << d[0][m-1][1] << '\n';
  }else{
    cout << -1 << '\n';
  }
  return 0;
}
